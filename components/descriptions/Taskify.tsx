"use client";

import { useLanguageStore } from "@/zustand/store";

export default function Taskify() {
  const lang = useLanguageStore((state) => state.language);

  if (lang === "korean") {
    return (
      <p>
        할 일을 to do, on progress, done으로 나누어 스케줄을 관리하는 서비스
        태스키파이 입니다.
        <br />
        <br />
        vite로 개발했으며, 리액트를 배우고 CRA 말고도 다른 방법이 있다는 것을
        처음 알게 되었습니다. 팀원 중에 개발 경험이 있던 팀원이 있어서 레이지
        로딩, 전역 상태 관리 라이브러리 등 몰랐던 개념들을 배우며 시야가
        넓어지는 기회가 되었습니다.
        <br />
        <br />
        프로젝트 내에서 동적 라우팅을 활용해서 각 대시보드별 태스크를 가져오고,
        대시보드 내에서 태스크를 생성 및 수정, 사이드메뉴의 퍼블리싱 및
        페이지네이션을 담당하였습니다.
        <br />
        <br />
        기능적으로는, 앞서 로컬 스토리지로 상태 관리를 했던 것에서 더 나아가
        쿠키에 토큰 정보를 저장하여 토큰 보유 여부에 따라 랜딩페이지나
        대시보드로의 리다이렉팅 기능을 구현하였으며 fetch 함수만 사용했던 저번
        프로젝트와는 달리, axios를 활용한 비동기 호출의 사용법에 숙달하는 계기가
        되었습니다.
      </p>
    );
  } else {
    return (
      <p>
        務めをTO DO, ON PROGRESS,
        DONEと分けてスケジュールを管理するサービスTASKIFYです。
        <br />
        <br />
        viteで開発しましたし、reactを教わってCRAのほかにも開発道具があったのを知りました。
        チームの中開発の経験のあったチーム員がいましたのでlazy
        loading,全域状態管理のライブラリなど
        知らなかった概念を教えてもらいながら視野が広がる機会になりました。
        <br />
        <br />
        プロジェクトの中で動的ルーティングを活用して各ダッシュボードのタスクを持ってくること、
        生成および修正、サイドメニューのパブリッシングとページネーションを担いました。
        <br />
        <br />
        機能的には、先にlocal
        storageで状態を管理したことからもっとひいてcookieにトークンの情報を貯蔵し、
        保有の可否によってランディングページやダッシュボードへのリダイレクトを具現いたしましたし、fetch関数だけ使った先のプロジェクトとは違って、
        axiosを活用した非同期通信に慣れるきっかけになりました。
      </p>
    );
  }
}
